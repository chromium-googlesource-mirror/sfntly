# Copyright 2011 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limit

"""Generates C++ test data for a font."""

from os.path import basename
from string import join
from string import replace
from string import Template
from subprocess import Popen

cc_license = """/*
 * Copyright 2011 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"""
do_not_edit = """/*
 * !!! DO NOT EDIT !!!
 * THIS FILE IS GENERATED BY A SCRIPT.
 * FOR MORE DETAILS SEE 'README-test_data.txt'.
 */

"""


class TestDataGenerator(object):
  """Generates a single .cc and a single .h file from XML font test data.

  Table data generators can be plugged in to generate more tables.
  """

  def __init__(self, file_name, font_dir, fonts, table_data_generator):
    self.file_name = file_name
    self.font_name = basename(file_name)
    self.header_guard = ('SFNTLY_CPP_SRC_TEST_' +
                         self.font_name.upper() + '_H_')
    self.font_dir = font_dir
    self.fonts = fonts
    self.table_data_generator = table_data_generator

  def PreprocessHeader(self):
    self.h_file.write(do_not_edit)
    self.h_file.write(cc_license)
    self.h_file.write('#ifndef ' + self.header_guard + '\n')
    self.h_file.write('#define ' + self.header_guard + '\n\n')
    self.h_file.write('#include "sfntly/port/type.h"\n\n')
    self.h_file.write('namespace sfntly {\n')
    for test_struct in self.table_data_generator.TestStructs():
      self.h_file.write(test_struct + '\n')

  def PostprocessHeader(self):
    self.h_file.write(
        Template("""\n const {$test_struct} {$array_name} = {
{$tests}};""").substitute(test_struct=
                          self.table_data_generator.TestStructName(),
                          array_name=self.table_data_generator.TestArrayName(),
                          tests=join(self.var_names, ',\n')))
    self.h_file.write('}  // namespace sfntly\n')
    self.h_file.write('\n#endif  //' + self.header_guard)

  def PreprocessSource(self):
    self.cc_file.write(do_not_edit)
    self.cc_file.write(cc_license)
    self.cc_file.write('#include "test/autogenerated/'
                       + self.font_name + '.h"\n\n')
    self.cc_file.write('namespace sfntly {\n')

  def PostprocessSource(self):
    self.cc_file.write('}  // namespace sfntly')
    self.cc_file.close()

  def PreprocessFiles(self):
    self.h_file = open(self.file_name + '.h', 'w')
    self.cc_file = open(self.file_name + '.cc', 'w')
    self.PreprocessHeader()
    self.PreprocessSource()

  def PostprocessFiles(self):
    """After writing the content, close endifs, namespaces, and indent."""
    self.PostprocessHeader()
    self.PostprocessSource()
    self.h_file.close()
    self.cc_file.close()
    # Popen needs an argv-style list
    popen_args = ['indent']  # program to be called
    popen_args.append("""-nbad -bap -bbo -nbc -br -brs -c4 -cd4 -ncdb -ce -ci4 -cli0
-cp10 -cs -d0 -di1 -nfc1 -nfca -hnl -i2 -ip0 -l80 -lp -npcs -nprs -npsl -saf
-sai -saw -nsc -nsob -nss""")  # flags for indent
    Popen(popen_args + [self.file_name + '.h'])  # we'll indent the .h file
    Popen(popen_args + [self.file_name + '.cc'])  # and the .cc file

  def Generate(self):
    """Write the test struct for each font."""
    self.PreprocessFiles()
    self.var_names = []
    for font in self.fonts:
      var_name = basename(font) if font.find('/') else font
      var_name = replace(var_name, '-', '_')
      var_name = replace(var_name, ' ', '_')
      var_name = replace(var_name, '.', '_')
      var_name = 'kTest' + var_name[0].capitalize() + var_name[1:]
      print 'Processing font ' + font
      try:
        self.h_file.write(
            self.table_data_generator.TestStructDecl().substitute(
                var_name=var_name))
        var_contents = self.table_data_generator.Generate(self.font_dir, font)
        self.cc_file.write(
            self.table_data_generator.TestStructDef().substitute(
                var_name=var_name,
                var_contents=var_contents))
        self.cc_file.write('\n')
        self.var_names.append(var_name)
      except (ValueError, KeyError) as e:
        print '  Error creating font data: ', e.args[0]

    self.PostprocessFiles()
